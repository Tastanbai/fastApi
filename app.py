import numpy as np
import base64
import mysql.connector
from io import BytesIO
from fastapi import FastAPI, File, UploadFile, Form, HTTPException, Depends
import time
from datetime import datetime
import os
import face_recognition
import pickle
from resize import resize_image
from face_save import extract_and_save_faces
from save_emb import save_embedding_to_file
from auth import router as auth_router, get_current_user
from register import router as register_router
from fastapi import Request
import json

app = FastAPI()


app.include_router(auth_router)
app.include_router(register_router)


OUTPUT_FOLDER = "faces_folder"
EMB_FOLDER = "emb"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)
os.makedirs(EMB_FOLDER, exist_ok=True)

DB_CONFIG = {
    "host": "face.tabet-kitap.kz",
    "user": "fastapi_user",
    "password": "secure_password",
    "database": "face_db",
    "port": 3306
}


async def check_permission(user: dict, request):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ API """
    
    allowed_api_str = user.get("allowed_api", "[]")  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É
    try:
        allowed_api = json.loads(allowed_api_str)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON –≤ —Å–ø–∏—Å–æ–∫
    except json.JSONDecodeError:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö API")

    api_name = request.scope["path"].strip("/")  

    if "*" in allowed_api or api_name in allowed_api:
        return  

    raise HTTPException(status_code=403, detail=f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API {api_name}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
known_embeddings = []
known_patients = []

# üî• –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ patient_id –∏–∑ –ë–î
def load_embeddings_from_database():
    global known_embeddings, known_patients
    embeddings = []
    patients = []

    try:
        with mysql.connector.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT patient_id, emb_path FROM faces")
                results = cursor.fetchall()

        for row in results:
            patient_id, emb_file = row
            if os.path.exists(emb_file):
                with open(emb_file, "rb") as file:
                    embeddings.append(pickle.load(file))
                    patients.append(patient_id)
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª {emb_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")

    except mysql.connector.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ –ë–î: {e}")

    known_embeddings = embeddings  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    known_patients = patients  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ patient_id

# üî• –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
load_embeddings_from_database()

# # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –ø–∞—Ü–∏–µ–Ω—Ç–µ)
# def load_embeddings_from_database():
#     global known_embeddings
#     embeddings = []
#     try:
#         with mysql.connector.connect(**DB_CONFIG) as conn:
#             with conn.cursor() as cursor:
#                 cursor.execute("SELECT emb_path FROM faces")
#                 results = cursor.fetchall()

#         for row in results:
#             emb_file = row[0]
#             if os.path.exists(emb_file):
#                 with open(emb_file, "rb") as file:
#                     embeddings.append(pickle.load(file))
#             else:
#                 print(f"‚ö†Ô∏è –§–∞–π–ª {emb_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
#     except mysql.connector.Error as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ –ë–î: {e}")
    
#     known_embeddings = embeddings  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫

# # üî• –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
# load_embeddings_from_database()

# üìå API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
@app.post("/process-patient/")
async def process_patient(
    request: Request,
    patient_id: str = Form(...),
    hospital_id: str = Form(...),
    branch_id: str = Form(...),
    palata_id: str = Form(...),
    file: UploadFile = File(...),
    user: dict = Depends(get_current_user),
    ):

    await check_permission(user, request)

    timestamp = time.strftime("%Y%m%d_%H%M%S")
    emb_folder = "emb"

    # üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    original_path = f"faces_folder/original_{timestamp}.jpg"
    content = await file.read()
    with open(original_path, "wb") as f:
        f.write(content)

    # üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Ü–∞
    face_image = face_recognition.load_image_file(original_path)
    face_encodings = face_recognition.face_encodings(face_image)

    if not face_encodings:
        raise HTTPException(status_code=400, detail="–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    start_time = time.time()
    embedding = face_encodings[0]
    emb_path = os.path.join(emb_folder, f"emb_{timestamp}.pkl")

    # üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
    with open(emb_path, "wb") as f:
        pickle.dump(embedding, f)
    embedding_time = time.time() - start_time  # –ö–æ–Ω–µ—Ü –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    
    # üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
    try:
        with mysql.connector.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                sql = """
                INSERT INTO faces (patient_id, hospital_id, branch_id, palata_id, image_path, emb_path)
                VALUES (%s, %s, %s, %s, %s, %s)
                """
                cursor.execute(sql, (patient_id, hospital_id, branch_id, palata_id, original_path, emb_path))
                conn.commit()
    except mysql.connector.Error as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {e}")

    # üìå –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –≠–ú–ë–ï–î–î–ò–ù–ì–û–í (–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ)
    load_embeddings_from_database()

    return {
        "message": "–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        "image_path": original_path,
        "embedding_path": emb_path,
        "embedding_time": f"{embedding_time:.2f} seconds",
    }

# üìå API –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–∏—Ü
@app.post("/compare-face/")
async def compare_face(
    request: Request,
    file: UploadFile = File(...),
    user: dict = Depends(get_current_user),
    ):
    
    await check_permission(user, request)
    
    content = await file.read()
    unknown_image = face_recognition.load_image_file(BytesIO(content))
    start_time = time.time()
    unknown_face_encodings = face_recognition.face_encodings(unknown_image)

    if not unknown_face_encodings:
        raise HTTPException(status_code=400, detail="–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
   
    unknown_face_encoding = unknown_face_encodings[0]

    if not known_embeddings:
        raise HTTPException(status_code=400, detail="–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")

    # üî• –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏—Ü –±–µ–∑ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤/–±–∞–∑—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)
   
    distances = face_recognition.face_distance(known_embeddings, unknown_face_encoding)
    min_distance = min(distances, default=1.0)
    similarity_percentage = (1 - min_distance) * 100
    comparison_time = time.time() - start_time

    return {
        "status": bool(similarity_percentage >= 55.0),
        "similarity_percentage": float(similarity_percentage),
        "comparison_time": f"{comparison_time:.2f} seconds"
    }


@app.post("/process-patient-base64/")
async def process_patient_base64(
    request: Request,
    patient_id: str = Form(...),
    hospital_id: str = Form(...),
    branch_id: str = Form(...),
    palata_id: str = Form(...),
    file_base64: str = Form(...),
    user: dict = Depends(get_current_user),
    ):

    await check_permission(user, request)
    
    check_permission("process_patient_base64", user)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ base64-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ UploadFile
    """
    try:
        image_data = base64.b64decode(file_base64)
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å base64: {e}")

    timestamp = time.strftime("%Y%m%d_%H%M%S")
    
    try:
        # üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        original_path = os.path.join(OUTPUT_FOLDER, f"original_{timestamp}.jpg")
        with open(original_path, "wb") as f:
            f.write(image_data)

        # üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Ü–∞
        face_save_path = extract_and_save_faces(original_path, OUTPUT_FOLDER)
        resized_path = os.path.join(OUTPUT_FOLDER, f"resized_{timestamp}.jpg")
        resize_image(face_save_path, resized_path)

        # üìå –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        start_time = time.time()
        emb_path = os.path.join(EMB_FOLDER, f"emb_{timestamp}.pkl")
        save_embedding_to_file(resized_path, emb_path)
        embedding_time = time.time() - start_time  # –ö–æ–Ω–µ—Ü –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏

        # üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            with mysql.connector.connect(**DB_CONFIG) as conn:
                with conn.cursor() as cursor:
                    sql = """
                    INSERT INTO faces (patient_id, hospital_id, branch_id, palata_id, image_path, emb_path)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    """
                    cursor.execute(sql, (patient_id, hospital_id, branch_id, palata_id, resized_path, emb_path))
                    conn.commit()
        except mysql.connector.Error as e:
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")

        # üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –≠–ú–ë–ï–î–î–ò–ù–ì–û–í (–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ)
        load_embeddings_from_database()

        return {
            "message": "–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (base64) –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            "resized_image_path": resized_path,
            "embedding_path": emb_path,
            "embedding_time": f"{embedding_time:.2f} seconds"
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/compare-face-numpy/")
async def compare_face(
    request: Request,
    file: UploadFile = File(...),
    user: dict = Depends(get_current_user),
    ):
    
    await check_permission(user, request)

    total_start_time = time.time()  # üïí –ù–∞—á–∞–ª–æ –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–∏

    content = await file.read()
    unknown_image = face_recognition.load_image_file(BytesIO(content))

    # üîπ –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–∏—Ü
    unknown_image = np.array(unknown_image)
    small_unknown_image = np.array(unknown_image[::2, ::2, :])  # –£–º–µ–Ω—å—à–∞–µ–º –≤ 2 —Ä–∞–∑–∞

    # üîπ –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
    # üïí –ù–∞—á–∞–ª–æ –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    comparison_start_time = time.time()
    unknown_face_encodings = face_recognition.face_encodings(small_unknown_image)

    if not unknown_face_encodings:
        raise HTTPException(status_code=400, detail="–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    unknown_face_encoding = unknown_face_encodings[0]

    if not known_embeddings:
        raise HTTPException(status_code=400, detail="–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")

    # üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ NumPy –º–∞—Å—Å–∏–≤ (—É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)
    known_embeddings_array = np.array(known_embeddings, dtype=np.float32)

    # üî• –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏—Ü –±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä–∞ –≤ Python (—É—Å–∫–æ—Ä—è–µ—Ç –≤ 2-3 —Ä–∞–∑–∞)
    distances = face_recognition.face_distance(known_embeddings_array, unknown_face_encoding)
    
    min_distance = np.min(distances, initial=1.0)
    similarity_percentage = (1 - min_distance) * 100
    comparison_time = time.time() - comparison_start_time  # –ö–æ–Ω–µ—Ü –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

    total_execution_time = time.time() - total_start_time  # –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    return {
        "status": bool(similarity_percentage >= 55.0),
        "similarity_percentage": float(similarity_percentage),
        "comparison_time": f"{comparison_time:.2f} seconds",
        "total_execution_time": f"{total_execution_time:.2f} seconds"  # –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    }

# üîπ API –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–∏—Ü —Å –±–∞–∑–æ–π
@app.post("/compare-face-qr/")
async def compare_face_with_db(
    request: Request,
    file: UploadFile = File(...),
    user: dict = Depends(get_current_user),
    ):
    
    await check_permission(user, request)

    total_start_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    if not known_embeddings or not known_patients:
        raise HTTPException(status_code=500, detail="–ë–∞–∑–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∏ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
    content = await file.read()
    unknown_image = face_recognition.load_image_file(BytesIO(content))
    small_unknown_image = np.array(unknown_image[::2, ::2, :])

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞
    comparison_start_time = time.time()
    unknown_face_encodings = face_recognition.face_encodings(small_unknown_image)

    if not unknown_face_encodings:
        raise HTTPException(status_code=400, detail="–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    unknown_face_encoding = unknown_face_encodings[0]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ NumPy –º–∞—Å—Å–∏–≤
    known_embeddings_array = np.array(known_embeddings, dtype=np.float32)

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏—Ü
    distances = face_recognition.face_distance(known_embeddings_array, unknown_face_encoding)
    min_index = np.argmin(distances)  # –ò–Ω–¥–µ–∫—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    min_distance = distances[min_index]

    similarity_percentage = (1 - min_distance) * 100
    status = bool(similarity_percentage >= 55.0)
    patient_id = known_patients[min_index] if status else None

    comparison_time = time.time() - comparison_start_time
    total_execution_time = time.time() - total_start_time

    # –ï—Å–ª–∏ –ª–∏—Ü–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
    if status:
        try:
            with mysql.connector.connect(**DB_CONFIG) as conn:
                with conn.cursor() as cursor:
                    insert_query = "INSERT INTO QR (status, patient_id) VALUES (%s, %s)"
                    cursor.execute(insert_query, (status, patient_id))
                    conn.commit()
        except mysql.connector.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")

    return {
        "status": status,
        "patient_id": patient_id,
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S") if status else None,
    }